import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;
import javax.sound.sampled.*;
import java.util.ArrayList;
import java.util.Random;

public class AlienInvasionGame extends JPanel implements ActionListener, KeyListener {
    private Timer timer;
    private Player player;
    private ArrayList<Alien> aliens;
    private ArrayList<Projectile> playerProjectiles;
    private ArrayList<Projectile> alienProjectiles;
    private int alienDirection = 1; 
    private boolean gameRunning = true;
    private int score = 0;
    private Clip shootClip, explosionClip, backgroundClip;

    public AlienInvasionGame() {
        setFocusable(true);
        addKeyListener(this);
        timer = new Timer(20, this);
        timer.start();

        player = new Player(300, 550);
        playerProjectiles = new ArrayList<>();
        alienProjectiles = new ArrayList<>();
        aliens = new ArrayList<>();

        
        for (int row = 0; row < 5; row++) {
            for (int col = 0; col < 10; col++) {
                aliens.add(new Alien(50 + col * 50, 50 + row * 40));
            }
        }

        
        loadSounds();
    }

    private void loadSounds() {
        try {
            // Load shoot sound
            shootClip = AudioSystem.getClip();
            shootClip.open(AudioSystem.getAudioInputStream(new File("D:\\SpL\\resources\\sounds\\shoot.wav")));

            // Load explosion sound
            explosionClip = AudioSystem.getClip();
            explosionClip.open(AudioSystem.getAudioInputStream(new File("D:\\SpL\\resources\\sounds\\explosion.wav")));

            // Load background music and loop it
            backgroundClip = AudioSystem.getClip();
            backgroundClip.open(AudioSystem.getAudioInputStream(new File("D:\\SpL\\resources\\sounds\\background.wav")));
            backgroundClip.loop(Clip.LOOP_CONTINUOUSLY);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void playShootSound() {
        shootClip.setFramePosition(0); 
        shootClip.start();
    }

    private void playExplosionSound() {
        explosionClip.setFramePosition(0); 
        explosionClip.start();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (!gameRunning) {
            g.setFont(new Font("Arial", Font.BOLD, 36));
            g.drawString("Game Over", 200, 300);
            return;
        }

        player.draw(g);
        for (Projectile p : playerProjectiles) {
            p.draw(g);
        }

        for (Alien alien : aliens) {
            alien.draw(g);
        }

        for (Projectile p : alienProjectiles) {
            p.draw(g);
        }

        // Display score
        g.setColor(Color.WHITE);
        g.setFont(new Font("Arial", Font.PLAIN, 20));
        g.drawString("Score: " + score, 10, 20);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (!gameRunning) return;

        player.move();

        
        for (int i = 0; i < playerProjectiles.size(); i++) {
            Projectile p = playerProjectiles.get(i);
            p.move();

            
            if (p.x <= 0 || p.x + p.width >= getWidth()) {
                p.reverseDirection();
            }

            if (p.y < 0) {
                playerProjectiles.remove(i);
                i--;
            }
        }

        
        for (int i = 0; i < alienProjectiles.size(); i++) {
            Projectile p = alienProjectiles.get(i);
            p.move();
            if (p.y > getHeight()) {
                alienProjectiles.remove(i);
                i--;
            }
        }

        
        boolean hitWall = false;
        for (Alien alien : aliens) {
            alien.x += alienDirection * alien.speed;
            if (alien.x <= 0 || alien.x + alien.width >= getWidth()) {
                hitWall = true;
            }
        }
        if (hitWall) {
            alienDirection *= -1;
            for (Alien alien : aliens) {
                alien.y += 20;
            }
        }

        
        checkCollisions();

        
        alienShoot();

        repaint();
    }

    private void checkCollisions() {
        
        ArrayList<Alien> aliensToRemove = new ArrayList<>();
        ArrayList<Projectile> projectilesToRemove = new ArrayList<>();

        
        for (Projectile p : playerProjectiles) {
            for (Alien alien : aliens) {
                if (p.getBounds().intersects(alien.getBounds())) {
                    projectilesToRemove.add(p); 
                    aliensToRemove.add(alien);  
                    score += 10; 
                    playExplosionSound(); 
                }
            }
        }

        
        playerProjectiles.removeAll(projectilesToRemove);
        aliens.removeAll(aliensToRemove);

        
        for (Projectile p : alienProjectiles) {
            if (p.getBounds().intersects(player.getBounds())) {
                gameRunning = false; 
                break;
            }
        }
    }

    private void alienShoot() {
        Random rand = new Random();
        for (int col = 0; col < 10; col++) {
            Alien bottomAlien = null;
            for (Alien alien : aliens) {
                if (alien.column == col) {
                    if (bottomAlien == null || alien.y > bottomAlien.y) {
                        bottomAlien = alien;
                    }
                }
            }
            
            if (bottomAlien != null && rand.nextInt(200) < 1) { // Adjusted shooting rate
                alienProjectiles.add(new Projectile(bottomAlien.x + bottomAlien.width / 2, bottomAlien.y + bottomAlien.height, 0, 5));
            }
        }
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_LEFT) {
            player.setDx(-5);
        } else if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
            player.setDx(5);
        } else if (e.getKeyCode() == KeyEvent.VK_SPACE) {
            playerProjectiles.add(new Projectile(player.x + player.width / 2, player.y, 0, -5));
            playShootSound(); 
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_LEFT || e.getKeyCode() == KeyEvent.VK_RIGHT) {
            player.setDx(0);
        }
    }

    @Override
    public void keyTyped(KeyEvent e) {}

    public static void main(String[] args) {
        JFrame frame = new JFrame("Alien Invasion");
        AlienInvasionGame game = new AlienInvasionGame();
        frame.add(game);
        frame.setSize(800, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
}

class Player {
    int x, y, width, height, dx;

    public Player(int x, int y) {
        this.x = x;
        this.y = y;
        this.width = 50;
        this.height = 20;
        this.dx = 0;
    }

    public void move() {
        x += dx;
    }

    public void setDx(int dx) {
        this.dx = dx;
    }

    public void draw(Graphics g) {
        g.setColor(Color.BLUE);
        g.fillRect(x, y, width, height);
    }

    public Rectangle getBounds() {
        return new Rectangle(x, y, width, height);
    }
}

class Alien {
    int x, y, width, height, speed, column;

    public Alien(int x, int y) {
        this.x = x;
        this.y = y;
        this.width = 40;
        this.height = 20;
        this.speed = 2;
        this.column = x / 50; 
    }

    public void draw(Graphics g) {
        g.setColor(Color.GREEN);
        g.fillRect(x, y, width, height);
    }

    public Rectangle getBounds() {
        return new Rectangle(x, y, width, height);
    }
}

class Projectile {
    int x, y, width, height, dx, dy;

    public Projectile(int x, int y, int dx, int dy) {
        this.x = x;
        this.y = y;
        this.dx = dx;
        this.dy = dy;
        this.width = 5;
        this.height = 10;
    }

    public void move() {
        x += dx;
        y += dy;
    }

    public void reverseDirection() {
        dx = -dx;  
    }

    public void draw(Graphics g) {
        g.setColor(Color.RED);
        g.fillRect(x, y, width, height);
    }

    public Rectangle getBounds() {
        return new Rectangle(x, y, width, height);
    }
}
